name: 'Continuous Integration'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

  test-action:
    name: GitHub Actions Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: test
        uses: ./
        with:
          file-path: '.github/test-file.yaml'
      - run: |
          echo "${{ toJson(steps.test.outputs) }}"
          echo "outputs variables:"
          echo "${{ steps.test.outputs.var_1__var_1__var_1 }}"
          echo "${{ steps.test.outputs.var_1__var_1__var_2 }}"
          echo "${{ steps.test.outputs.var_1__var_1__var_3 }}"
          echo "${{ steps.test.outputs.var_1__var_1__var_4__var_1__var_2 }}"
          echo "${{ steps.test.outputs.var_1__var_2 }}"
          echo "${{ steps.test.outputs.var_2 }}"
          echo "environment variables:"
          echo "${{ env.var_1__var_1__var_1 }}"
          echo "${{ env.var_1__var_1__var_2 }}"
          echo "${{ env.var_1__var_1__var_3 }}"
          echo "${{ env.var_1__var_1__var_4__var_1__var_2 }}"
          echo "${{ env.var_1__var_2 }}"
          echo "${{ env.var_2 }}"
      - uses: ./
        id: test-nodes
        with:
          file-path: '.github/test-file.yaml'
          node: 'var_1.var_1'
      - run: |
          echo "${{ toJson(steps.test-nodes.outputs) }}"
          echo "outputs variables:"
          echo "${{ steps.test-nodes.outputs.var_1 }}"
          echo "${{ steps.test-nodes.outputs.var_2 }}"
          echo "${{ steps.test-nodes.outputs.var_3 }}"
          echo "${{ steps.test-nodes.outputs.var_4__var_1__var_2 }}"
      - uses: ./
        name: Test File Not Found, expect no failure
        id: test-file-not-found # By default the action fails if the file is not found, test that it does not fail when instructed
        with:
          file-path: '.github/not-found-test-file.yaml'
          fail-on-file-not-found: false
      - uses: ./
        name: Test File Not Found, expect failure
        id: test-file-not-found-fail
        with:
          file-path: '.github/not-found-test-file.yaml'
        continue-on-error: true
